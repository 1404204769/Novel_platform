/**
 *
 *  Book.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Book.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::novel;

const std::string Book::Cols::_Book_ID = "Book_ID";
const std::string Book::Cols::_Book_Name = "Book_Name";
const std::string Book::Cols::_Status = "Status";
const std::string Book::Cols::_Synopsis = "Synopsis";
const std::string Book::Cols::_Publisher = "Publisher";
const std::string Book::Cols::_Author = "Author";
const std::string Book::Cols::_Create_Time = "Create_Time";
const std::string Book::Cols::_Update_Time = "Update_Time";
const std::string Book::Cols::_Memo = "Memo";
const std::string Book::primaryKeyName = "Book_ID";
const bool Book::hasPrimaryKey = true;
const std::string Book::tableName = "book";

const std::vector<typename Book::MetaData> Book::metaData_={
{"Book_ID","int32_t","int(10)",4,1,1,1},
{"Book_Name","std::string","varchar(255)",255,0,0,1},
{"Status","std::string","varchar(255)",255,0,0,1},
{"Synopsis","std::string","varchar(512)",512,0,0,1},
{"Publisher","std::string","varchar(255)",255,0,0,1},
{"Author","std::string","varchar(255)",255,0,0,1},
{"Create_Time","::trantor::Date","timestamp",0,0,0,1},
{"Update_Time","::trantor::Date","timestamp",0,0,0,1},
{"Memo","std::string","text",0,0,0,1}
};
const std::string &Book::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Book::Book(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>(r["Book_ID"].as<int32_t>());
        }
        if(!r["Book_Name"].isNull())
        {
            bookName_=std::make_shared<std::string>(r["Book_Name"].as<std::string>());
        }
        if(!r["Status"].isNull())
        {
            status_=std::make_shared<std::string>(r["Status"].as<std::string>());
        }
        if(!r["Synopsis"].isNull())
        {
            synopsis_=std::make_shared<std::string>(r["Synopsis"].as<std::string>());
        }
        if(!r["Publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(r["Publisher"].as<std::string>());
        }
        if(!r["Author"].isNull())
        {
            author_=std::make_shared<std::string>(r["Author"].as<std::string>());
        }
        if(!r["Create_Time"].isNull())
        {
            auto timeStr = r["Create_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Update_Time"].isNull())
        {
            auto timeStr = r["Update_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(r["Memo"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            bookId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bookName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            synopsis_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            publisher_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            author_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            memo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Book::Book(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            synopsis_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            author_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            memo_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Book::Book(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Book_ID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["Book_ID"].asInt64());
        }
    }
    if(pJson.isMember("Book_Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Book_Name"].isNull())
        {
            bookName_=std::make_shared<std::string>(pJson["Book_Name"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Synopsis"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Synopsis"].isNull())
        {
            synopsis_=std::make_shared<std::string>(pJson["Synopsis"].asString());
        }
    }
    if(pJson.isMember("Publisher"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson["Publisher"].asString());
        }
    }
    if(pJson.isMember("Author"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Author"].isNull())
        {
            author_=std::make_shared<std::string>(pJson["Author"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Memo"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(pJson["Memo"].asString());
        }
    }
}

void Book::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            synopsis_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            author_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            memo_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}
                                                                    
void Book::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Book_ID"))
    {
        if(!pJson["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["Book_ID"].asInt64());
        }
    }
    if(pJson.isMember("Book_Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Book_Name"].isNull())
        {
            bookName_=std::make_shared<std::string>(pJson["Book_Name"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Synopsis"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Synopsis"].isNull())
        {
            synopsis_=std::make_shared<std::string>(pJson["Synopsis"].asString());
        }
    }
    if(pJson.isMember("Publisher"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson["Publisher"].asString());
        }
    }
    if(pJson.isMember("Author"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Author"].isNull())
        {
            author_=std::make_shared<std::string>(pJson["Author"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Memo"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(pJson["Memo"].asString());
        }
    }
}

const int32_t &Book::getValueOfBookId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(bookId_)
        return *bookId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Book::getBookId() const noexcept
{
    return bookId_;
}
void Book::setBookId(const int32_t &pBookId) noexcept
{
    bookId_ = std::make_shared<int32_t>(pBookId);
    dirtyFlag_[0] = true;
}
const typename Book::PrimaryKeyType & Book::getPrimaryKey() const
{
    assert(bookId_);
    return *bookId_;
}

const std::string &Book::getValueOfBookName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bookName_)
        return *bookName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getBookName() const noexcept
{
    return bookName_;
}
void Book::setBookName(const std::string &pBookName) noexcept
{
    bookName_ = std::make_shared<std::string>(pBookName);
    dirtyFlag_[1] = true;
}
void Book::setBookName(std::string &&pBookName) noexcept
{
    bookName_ = std::make_shared<std::string>(std::move(pBookName));
    dirtyFlag_[1] = true;
}

const std::string &Book::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getStatus() const noexcept
{
    return status_;
}
void Book::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[2] = true;
}
void Book::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[2] = true;
}

const std::string &Book::getValueOfSynopsis() const noexcept
{
    const static std::string defaultValue = std::string();
    if(synopsis_)
        return *synopsis_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getSynopsis() const noexcept
{
    return synopsis_;
}
void Book::setSynopsis(const std::string &pSynopsis) noexcept
{
    synopsis_ = std::make_shared<std::string>(pSynopsis);
    dirtyFlag_[3] = true;
}
void Book::setSynopsis(std::string &&pSynopsis) noexcept
{
    synopsis_ = std::make_shared<std::string>(std::move(pSynopsis));
    dirtyFlag_[3] = true;
}

const std::string &Book::getValueOfPublisher() const noexcept
{
    const static std::string defaultValue = std::string();
    if(publisher_)
        return *publisher_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getPublisher() const noexcept
{
    return publisher_;
}
void Book::setPublisher(const std::string &pPublisher) noexcept
{
    publisher_ = std::make_shared<std::string>(pPublisher);
    dirtyFlag_[4] = true;
}
void Book::setPublisher(std::string &&pPublisher) noexcept
{
    publisher_ = std::make_shared<std::string>(std::move(pPublisher));
    dirtyFlag_[4] = true;
}

const std::string &Book::getValueOfAuthor() const noexcept
{
    const static std::string defaultValue = std::string();
    if(author_)
        return *author_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getAuthor() const noexcept
{
    return author_;
}
void Book::setAuthor(const std::string &pAuthor) noexcept
{
    author_ = std::make_shared<std::string>(pAuthor);
    dirtyFlag_[5] = true;
}
void Book::setAuthor(std::string &&pAuthor) noexcept
{
    author_ = std::make_shared<std::string>(std::move(pAuthor));
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Book::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Book::getCreateTime() const noexcept
{
    return createTime_;
}
void Book::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Book::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Book::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Book::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[7] = true;
}

const std::string &Book::getValueOfMemo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(memo_)
        return *memo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Book::getMemo() const noexcept
{
    return memo_;
}
void Book::setMemo(const std::string &pMemo) noexcept
{
    memo_ = std::make_shared<std::string>(pMemo);
    dirtyFlag_[8] = true;
}
void Book::setMemo(std::string &&pMemo) noexcept
{
    memo_ = std::make_shared<std::string>(std::move(pMemo));
    dirtyFlag_[8] = true;
}

void Book::updateId(const uint64_t id)
{
    bookId_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Book::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Book_Name",
        "Status",
        "Synopsis",
        "Publisher",
        "Author",
        "Create_Time",
        "Update_Time",
        "Memo"
    };
    return inCols;
}

void Book::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookName())
        {
            binder << getValueOfBookName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSynopsis())
        {
            binder << getValueOfSynopsis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPublisher())
        {
            binder << getValueOfPublisher();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAuthor())
        {
            binder << getValueOfAuthor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMemo())
        {
            binder << getValueOfMemo();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Book::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Book::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookName())
        {
            binder << getValueOfBookName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSynopsis())
        {
            binder << getValueOfSynopsis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPublisher())
        {
            binder << getValueOfPublisher();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAuthor())
        {
            binder << getValueOfAuthor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMemo())
        {
            binder << getValueOfMemo();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Book::toJson() const
{
    Json::Value ret;
    if(getBookId())
    {
        ret["Book_ID"]=getValueOfBookId();
    }
    else
    {
        ret["Book_ID"]=Json::Value();
    }
    if(getBookName())
    {
        ret["Book_Name"]=getValueOfBookName();
    }
    else
    {
        ret["Book_Name"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getSynopsis())
    {
        ret["Synopsis"]=getValueOfSynopsis();
    }
    else
    {
        ret["Synopsis"]=Json::Value();
    }
    if(getPublisher())
    {
        ret["Publisher"]=getValueOfPublisher();
    }
    else
    {
        ret["Publisher"]=Json::Value();
    }
    if(getAuthor())
    {
        ret["Author"]=getValueOfAuthor();
    }
    else
    {
        ret["Author"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    if(getMemo())
    {
        ret["Memo"]=getValueOfMemo();
    }
    else
    {
        ret["Memo"]=Json::Value();
    }
    return ret;
}

Json::Value Book::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getBookId())
            {
                ret[pMasqueradingVector[0]]=getValueOfBookId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBookName())
            {
                ret[pMasqueradingVector[1]]=getValueOfBookName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[2]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSynopsis())
            {
                ret[pMasqueradingVector[3]]=getValueOfSynopsis();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPublisher())
            {
                ret[pMasqueradingVector[4]]=getValueOfPublisher();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAuthor())
            {
                ret[pMasqueradingVector[5]]=getValueOfAuthor();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[6]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[7]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMemo())
            {
                ret[pMasqueradingVector[8]]=getValueOfMemo();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getBookId())
    {
        ret["Book_ID"]=getValueOfBookId();
    }
    else
    {
        ret["Book_ID"]=Json::Value();
    }
    if(getBookName())
    {
        ret["Book_Name"]=getValueOfBookName();
    }
    else
    {
        ret["Book_Name"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getSynopsis())
    {
        ret["Synopsis"]=getValueOfSynopsis();
    }
    else
    {
        ret["Synopsis"]=Json::Value();
    }
    if(getPublisher())
    {
        ret["Publisher"]=getValueOfPublisher();
    }
    else
    {
        ret["Publisher"]=Json::Value();
    }
    if(getAuthor())
    {
        ret["Author"]=getValueOfAuthor();
    }
    else
    {
        ret["Author"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    if(getMemo())
    {
        ret["Memo"]=getValueOfMemo();
    }
    else
    {
        ret["Memo"]=Json::Value();
    }
    return ret;
}

bool Book::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Book_ID"))
    {
        if(!validJsonOfField(0, "Book_ID", pJson["Book_ID"], err, true))
            return false;
    }
    if(pJson.isMember("Book_Name"))
    {
        if(!validJsonOfField(1, "Book_Name", pJson["Book_Name"], err, true))
            return false;
    }
    else
    {
        err="The Book_Name column cannot be null";
        return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(2, "Status", pJson["Status"], err, true))
            return false;
    }
    else
    {
        err="The Status column cannot be null";
        return false;
    }
    if(pJson.isMember("Synopsis"))
    {
        if(!validJsonOfField(3, "Synopsis", pJson["Synopsis"], err, true))
            return false;
    }
    else
    {
        err="The Synopsis column cannot be null";
        return false;
    }
    if(pJson.isMember("Publisher"))
    {
        if(!validJsonOfField(4, "Publisher", pJson["Publisher"], err, true))
            return false;
    }
    else
    {
        err="The Publisher column cannot be null";
        return false;
    }
    if(pJson.isMember("Author"))
    {
        if(!validJsonOfField(5, "Author", pJson["Author"], err, true))
            return false;
    }
    else
    {
        err="The Author column cannot be null";
        return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(6, "Create_Time", pJson["Create_Time"], err, true))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(7, "Update_Time", pJson["Update_Time"], err, true))
            return false;
    }
    if(pJson.isMember("Memo"))
    {
        if(!validJsonOfField(8, "Memo", pJson["Memo"], err, true))
            return false;
    }
    else
    {
        err="The Memo column cannot be null";
        return false;
    }
    return true;
}
bool Book::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Book::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Book_ID"))
    {
        if(!validJsonOfField(0, "Book_ID", pJson["Book_ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Book_Name"))
    {
        if(!validJsonOfField(1, "Book_Name", pJson["Book_Name"], err, false))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(2, "Status", pJson["Status"], err, false))
            return false;
    }
    if(pJson.isMember("Synopsis"))
    {
        if(!validJsonOfField(3, "Synopsis", pJson["Synopsis"], err, false))
            return false;
    }
    if(pJson.isMember("Publisher"))
    {
        if(!validJsonOfField(4, "Publisher", pJson["Publisher"], err, false))
            return false;
    }
    if(pJson.isMember("Author"))
    {
        if(!validJsonOfField(5, "Author", pJson["Author"], err, false))
            return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(6, "Create_Time", pJson["Create_Time"], err, false))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(7, "Update_Time", pJson["Update_Time"], err, false))
            return false;
    }
    if(pJson.isMember("Memo"))
    {
        if(!validJsonOfField(8, "Memo", pJson["Memo"], err, false))
            return false;
    }
    return true;
}
bool Book::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Book::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
