/**
 *
 *  Note.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Note.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::novel;

const std::string Note::Cols::_Note_ID = "Note_ID";
const std::string Note::Cols::_Title = "Title";
const std::string Note::Cols::_Content = "Content";
const std::string Note::Cols::_Create_Time = "Create_Time";
const std::string Note::Cols::_Update_Time = "Update_Time";
const std::string Note::Cols::_Comment_Count = "Comment_Count";
const std::string Note::Cols::_User_ID = "User_ID";
const std::string Note::Cols::_Status = "Status";
const std::string Note::Cols::_Type = "Type";
const std::string Note::primaryKeyName = "Note_ID";
const bool Note::hasPrimaryKey = true;
const std::string Note::tableName = "note";

const std::vector<typename Note::MetaData> Note::metaData_={
{"Note_ID","int32_t","int(10)",4,1,1,1},
{"Title","std::string","varchar(255)",255,0,0,1},
{"Content","std::string","text",0,0,0,1},
{"Create_Time","::trantor::Date","timestamp",0,0,0,1},
{"Update_Time","::trantor::Date","timestamp",0,0,0,1},
{"Comment_Count","int32_t","int(255)",4,0,0,1},
{"User_ID","int32_t","int(10)",4,0,0,1},
{"Status","std::string","varchar(255)",255,0,0,1},
{"Type","std::string","varchar(255)",255,0,0,1}
};
const std::string &Note::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Note::Note(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Note_ID"].isNull())
        {
            noteId_=std::make_shared<int32_t>(r["Note_ID"].as<int32_t>());
        }
        if(!r["Title"].isNull())
        {
            title_=std::make_shared<std::string>(r["Title"].as<std::string>());
        }
        if(!r["Content"].isNull())
        {
            content_=std::make_shared<std::string>(r["Content"].as<std::string>());
        }
        if(!r["Create_Time"].isNull())
        {
            auto timeStr = r["Create_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Update_Time"].isNull())
        {
            auto timeStr = r["Update_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Comment_Count"].isNull())
        {
            commentCount_=std::make_shared<int32_t>(r["Comment_Count"].as<int32_t>());
        }
        if(!r["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["User_ID"].as<int32_t>());
        }
        if(!r["Status"].isNull())
        {
            status_=std::make_shared<std::string>(r["Status"].as<std::string>());
        }
        if(!r["Type"].isNull())
        {
            type_=std::make_shared<std::string>(r["Type"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            noteId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            commentCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Note::Note(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            noteId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            commentCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Note::Note(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Note_ID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Note_ID"].isNull())
        {
            noteId_=std::make_shared<int32_t>((int32_t)pJson["Note_ID"].asInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Comment_Count"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Comment_Count"].isNull())
        {
            commentCount_=std::make_shared<int32_t>((int32_t)pJson["Comment_Count"].asInt64());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["Type"].asString());
        }
    }
}

void Note::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            noteId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            commentCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}
                                                                    
void Note::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Note_ID"))
    {
        if(!pJson["Note_ID"].isNull())
        {
            noteId_=std::make_shared<int32_t>((int32_t)pJson["Note_ID"].asInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Comment_Count"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Comment_Count"].isNull())
        {
            commentCount_=std::make_shared<int32_t>((int32_t)pJson["Comment_Count"].asInt64());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["Type"].asString());
        }
    }
}

const int32_t &Note::getValueOfNoteId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(noteId_)
        return *noteId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Note::getNoteId() const noexcept
{
    return noteId_;
}
void Note::setNoteId(const int32_t &pNoteId) noexcept
{
    noteId_ = std::make_shared<int32_t>(pNoteId);
    dirtyFlag_[0] = true;
}
const typename Note::PrimaryKeyType & Note::getPrimaryKey() const
{
    assert(noteId_);
    return *noteId_;
}

const std::string &Note::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Note::getTitle() const noexcept
{
    return title_;
}
void Note::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void Note::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}

const std::string &Note::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Note::getContent() const noexcept
{
    return content_;
}
void Note::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[2] = true;
}
void Note::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[2] = true;
}

const ::trantor::Date &Note::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Note::getCreateTime() const noexcept
{
    return createTime_;
}
void Note::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Note::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Note::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Note::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[4] = true;
}

const int32_t &Note::getValueOfCommentCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(commentCount_)
        return *commentCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Note::getCommentCount() const noexcept
{
    return commentCount_;
}
void Note::setCommentCount(const int32_t &pCommentCount) noexcept
{
    commentCount_ = std::make_shared<int32_t>(pCommentCount);
    dirtyFlag_[5] = true;
}

const int32_t &Note::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Note::getUserId() const noexcept
{
    return userId_;
}
void Note::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[6] = true;
}

const std::string &Note::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Note::getStatus() const noexcept
{
    return status_;
}
void Note::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[7] = true;
}
void Note::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[7] = true;
}

const std::string &Note::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Note::getType() const noexcept
{
    return type_;
}
void Note::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[8] = true;
}
void Note::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[8] = true;
}

void Note::updateId(const uint64_t id)
{
    noteId_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Note::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Title",
        "Content",
        "Create_Time",
        "Update_Time",
        "Comment_Count",
        "User_ID",
        "Status",
        "Type"
    };
    return inCols;
}

void Note::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCommentCount())
        {
            binder << getValueOfCommentCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Note::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Note::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCommentCount())
        {
            binder << getValueOfCommentCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Note::toJson() const
{
    Json::Value ret;
    if(getNoteId())
    {
        ret["Note_ID"]=getValueOfNoteId();
    }
    else
    {
        ret["Note_ID"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    if(getCommentCount())
    {
        ret["Comment_Count"]=getValueOfCommentCount();
    }
    else
    {
        ret["Comment_Count"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    return ret;
}

Json::Value Note::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getNoteId())
            {
                ret[pMasqueradingVector[0]]=getValueOfNoteId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[2]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[3]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[4]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCommentCount())
            {
                ret[pMasqueradingVector[5]]=getValueOfCommentCount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[6]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[7]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[8]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getNoteId())
    {
        ret["Note_ID"]=getValueOfNoteId();
    }
    else
    {
        ret["Note_ID"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    if(getCommentCount())
    {
        ret["Comment_Count"]=getValueOfCommentCount();
    }
    else
    {
        ret["Comment_Count"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    return ret;
}

bool Note::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Note_ID"))
    {
        if(!validJsonOfField(0, "Note_ID", pJson["Note_ID"], err, true))
            return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(1, "Title", pJson["Title"], err, true))
            return false;
    }
    else
    {
        err="The Title column cannot be null";
        return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(2, "Content", pJson["Content"], err, true))
            return false;
    }
    else
    {
        err="The Content column cannot be null";
        return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(3, "Create_Time", pJson["Create_Time"], err, true))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(4, "Update_Time", pJson["Update_Time"], err, true))
            return false;
    }
    if(pJson.isMember("Comment_Count"))
    {
        if(!validJsonOfField(5, "Comment_Count", pJson["Comment_Count"], err, true))
            return false;
    }
    else
    {
        err="The Comment_Count column cannot be null";
        return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(6, "User_ID", pJson["User_ID"], err, true))
            return false;
    }
    else
    {
        err="The User_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(7, "Status", pJson["Status"], err, true))
            return false;
    }
    else
    {
        err="The Status column cannot be null";
        return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(8, "Type", pJson["Type"], err, true))
            return false;
    }
    else
    {
        err="The Type column cannot be null";
        return false;
    }
    return true;
}
bool Note::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Note::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Note_ID"))
    {
        if(!validJsonOfField(0, "Note_ID", pJson["Note_ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(1, "Title", pJson["Title"], err, false))
            return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(2, "Content", pJson["Content"], err, false))
            return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(3, "Create_Time", pJson["Create_Time"], err, false))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(4, "Update_Time", pJson["Update_Time"], err, false))
            return false;
    }
    if(pJson.isMember("Comment_Count"))
    {
        if(!validJsonOfField(5, "Comment_Count", pJson["Comment_Count"], err, false))
            return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(6, "User_ID", pJson["User_ID"], err, false))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(7, "Status", pJson["Status"], err, false))
            return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(8, "Type", pJson["Type"], err, false))
            return false;
    }
    return true;
}
bool Note::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Note::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
