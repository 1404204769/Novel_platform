/**
 *
 *  Chapter.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Chapter.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::novel;

const std::string Chapter::Cols::_Chapter_D = "Chapter_D";
const std::string Chapter::Cols::_Book_ID = "Book_ID";
const std::string Chapter::Cols::_Order_ID = "Order_ID";
const std::string Chapter::Cols::_Valid = "Valid";
const std::string Chapter::Cols::_Content = "Content";
const std::string Chapter::Cols::_Remarks = "Remarks";
const std::string Chapter::Cols::_User_ID = "User_ID";
const std::string Chapter::Cols::_Title = "Title";
const std::string Chapter::primaryKeyName = "Chapter_D";
const bool Chapter::hasPrimaryKey = true;
const std::string Chapter::tableName = "chapter";

const std::vector<typename Chapter::MetaData> Chapter::metaData_={
{"Chapter_D","int32_t","int(10)",4,1,1,1},
{"Book_ID","int32_t","int(10)",4,0,0,1},
{"Order_ID","int32_t","int(10)",4,0,0,1},
{"Valid","int8_t","tinyint(1)",1,0,0,1},
{"Content","std::string","text",0,0,0,1},
{"Remarks","std::string","varchar(255)",255,0,0,1},
{"User_ID","int32_t","int(10)",4,0,0,1},
{"Title","std::string","varchar(255)",255,0,0,1}
};
const std::string &Chapter::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Chapter::Chapter(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Chapter_D"].isNull())
        {
            chapterD_=std::make_shared<int32_t>(r["Chapter_D"].as<int32_t>());
        }
        if(!r["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>(r["Book_ID"].as<int32_t>());
        }
        if(!r["Order_ID"].isNull())
        {
            orderId_=std::make_shared<int32_t>(r["Order_ID"].as<int32_t>());
        }
        if(!r["Valid"].isNull())
        {
            valid_=std::make_shared<int8_t>(r["Valid"].as<int8_t>());
        }
        if(!r["Content"].isNull())
        {
            content_=std::make_shared<std::string>(r["Content"].as<std::string>());
        }
        if(!r["Remarks"].isNull())
        {
            remarks_=std::make_shared<std::string>(r["Remarks"].as<std::string>());
        }
        if(!r["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["User_ID"].as<int32_t>());
        }
        if(!r["Title"].isNull())
        {
            title_=std::make_shared<std::string>(r["Title"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            chapterD_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bookId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            orderId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            valid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            remarks_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Chapter::Chapter(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            chapterD_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            orderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

Chapter::Chapter(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Chapter_D"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Chapter_D"].isNull())
        {
            chapterD_=std::make_shared<int32_t>((int32_t)pJson["Chapter_D"].asInt64());
        }
    }
    if(pJson.isMember("Book_ID"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["Book_ID"].asInt64());
        }
    }
    if(pJson.isMember("Order_ID"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Order_ID"].isNull())
        {
            orderId_=std::make_shared<int32_t>((int32_t)pJson["Order_ID"].asInt64());
        }
    }
    if(pJson.isMember("Valid"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Valid"].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson["Valid"].asInt64());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Remarks"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Remarks"].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson["Remarks"].asString());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
}

void Chapter::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            chapterD_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            orderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}
                                                                    
void Chapter::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Chapter_D"))
    {
        if(!pJson["Chapter_D"].isNull())
        {
            chapterD_=std::make_shared<int32_t>((int32_t)pJson["Chapter_D"].asInt64());
        }
    }
    if(pJson.isMember("Book_ID"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Book_ID"].isNull())
        {
            bookId_=std::make_shared<int32_t>((int32_t)pJson["Book_ID"].asInt64());
        }
    }
    if(pJson.isMember("Order_ID"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Order_ID"].isNull())
        {
            orderId_=std::make_shared<int32_t>((int32_t)pJson["Order_ID"].asInt64());
        }
    }
    if(pJson.isMember("Valid"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Valid"].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson["Valid"].asInt64());
        }
    }
    if(pJson.isMember("Content"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["Content"].asString());
        }
    }
    if(pJson.isMember("Remarks"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Remarks"].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson["Remarks"].asString());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
}

const int32_t &Chapter::getValueOfChapterD() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(chapterD_)
        return *chapterD_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Chapter::getChapterD() const noexcept
{
    return chapterD_;
}
void Chapter::setChapterD(const int32_t &pChapterD) noexcept
{
    chapterD_ = std::make_shared<int32_t>(pChapterD);
    dirtyFlag_[0] = true;
}
const typename Chapter::PrimaryKeyType & Chapter::getPrimaryKey() const
{
    assert(chapterD_);
    return *chapterD_;
}

const int32_t &Chapter::getValueOfBookId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(bookId_)
        return *bookId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Chapter::getBookId() const noexcept
{
    return bookId_;
}
void Chapter::setBookId(const int32_t &pBookId) noexcept
{
    bookId_ = std::make_shared<int32_t>(pBookId);
    dirtyFlag_[1] = true;
}

const int32_t &Chapter::getValueOfOrderId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(orderId_)
        return *orderId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Chapter::getOrderId() const noexcept
{
    return orderId_;
}
void Chapter::setOrderId(const int32_t &pOrderId) noexcept
{
    orderId_ = std::make_shared<int32_t>(pOrderId);
    dirtyFlag_[2] = true;
}

const int8_t &Chapter::getValueOfValid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(valid_)
        return *valid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Chapter::getValid() const noexcept
{
    return valid_;
}
void Chapter::setValid(const int8_t &pValid) noexcept
{
    valid_ = std::make_shared<int8_t>(pValid);
    dirtyFlag_[3] = true;
}

const std::string &Chapter::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getContent() const noexcept
{
    return content_;
}
void Chapter::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[4] = true;
}
void Chapter::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[4] = true;
}

const std::string &Chapter::getValueOfRemarks() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remarks_)
        return *remarks_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getRemarks() const noexcept
{
    return remarks_;
}
void Chapter::setRemarks(const std::string &pRemarks) noexcept
{
    remarks_ = std::make_shared<std::string>(pRemarks);
    dirtyFlag_[5] = true;
}
void Chapter::setRemarks(std::string &&pRemarks) noexcept
{
    remarks_ = std::make_shared<std::string>(std::move(pRemarks));
    dirtyFlag_[5] = true;
}

const int32_t &Chapter::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Chapter::getUserId() const noexcept
{
    return userId_;
}
void Chapter::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[6] = true;
}

const std::string &Chapter::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getTitle() const noexcept
{
    return title_;
}
void Chapter::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[7] = true;
}
void Chapter::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[7] = true;
}

void Chapter::updateId(const uint64_t id)
{
    chapterD_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Chapter::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Book_ID",
        "Order_ID",
        "Valid",
        "Content",
        "Remarks",
        "User_ID",
        "Title"
    };
    return inCols;
}

void Chapter::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOrderId())
        {
            binder << getValueOfOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getValid())
        {
            binder << getValueOfValid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRemarks())
        {
            binder << getValueOfRemarks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Chapter::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Chapter::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBookId())
        {
            binder << getValueOfBookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOrderId())
        {
            binder << getValueOfOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getValid())
        {
            binder << getValueOfValid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRemarks())
        {
            binder << getValueOfRemarks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Chapter::toJson() const
{
    Json::Value ret;
    if(getChapterD())
    {
        ret["Chapter_D"]=getValueOfChapterD();
    }
    else
    {
        ret["Chapter_D"]=Json::Value();
    }
    if(getBookId())
    {
        ret["Book_ID"]=getValueOfBookId();
    }
    else
    {
        ret["Book_ID"]=Json::Value();
    }
    if(getOrderId())
    {
        ret["Order_ID"]=getValueOfOrderId();
    }
    else
    {
        ret["Order_ID"]=Json::Value();
    }
    if(getValid())
    {
        ret["Valid"]=getValueOfValid();
    }
    else
    {
        ret["Valid"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getRemarks())
    {
        ret["Remarks"]=getValueOfRemarks();
    }
    else
    {
        ret["Remarks"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    return ret;
}

Json::Value Chapter::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getChapterD())
            {
                ret[pMasqueradingVector[0]]=getValueOfChapterD();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBookId())
            {
                ret[pMasqueradingVector[1]]=getValueOfBookId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getOrderId())
            {
                ret[pMasqueradingVector[2]]=getValueOfOrderId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getValid())
            {
                ret[pMasqueradingVector[3]]=getValueOfValid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[4]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRemarks())
            {
                ret[pMasqueradingVector[5]]=getValueOfRemarks();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[6]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[7]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getChapterD())
    {
        ret["Chapter_D"]=getValueOfChapterD();
    }
    else
    {
        ret["Chapter_D"]=Json::Value();
    }
    if(getBookId())
    {
        ret["Book_ID"]=getValueOfBookId();
    }
    else
    {
        ret["Book_ID"]=Json::Value();
    }
    if(getOrderId())
    {
        ret["Order_ID"]=getValueOfOrderId();
    }
    else
    {
        ret["Order_ID"]=Json::Value();
    }
    if(getValid())
    {
        ret["Valid"]=getValueOfValid();
    }
    else
    {
        ret["Valid"]=Json::Value();
    }
    if(getContent())
    {
        ret["Content"]=getValueOfContent();
    }
    else
    {
        ret["Content"]=Json::Value();
    }
    if(getRemarks())
    {
        ret["Remarks"]=getValueOfRemarks();
    }
    else
    {
        ret["Remarks"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    return ret;
}

bool Chapter::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Chapter_D"))
    {
        if(!validJsonOfField(0, "Chapter_D", pJson["Chapter_D"], err, true))
            return false;
    }
    if(pJson.isMember("Book_ID"))
    {
        if(!validJsonOfField(1, "Book_ID", pJson["Book_ID"], err, true))
            return false;
    }
    else
    {
        err="The Book_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Order_ID"))
    {
        if(!validJsonOfField(2, "Order_ID", pJson["Order_ID"], err, true))
            return false;
    }
    else
    {
        err="The Order_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Valid"))
    {
        if(!validJsonOfField(3, "Valid", pJson["Valid"], err, true))
            return false;
    }
    else
    {
        err="The Valid column cannot be null";
        return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(4, "Content", pJson["Content"], err, true))
            return false;
    }
    else
    {
        err="The Content column cannot be null";
        return false;
    }
    if(pJson.isMember("Remarks"))
    {
        if(!validJsonOfField(5, "Remarks", pJson["Remarks"], err, true))
            return false;
    }
    else
    {
        err="The Remarks column cannot be null";
        return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(6, "User_ID", pJson["User_ID"], err, true))
            return false;
    }
    else
    {
        err="The User_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(7, "Title", pJson["Title"], err, true))
            return false;
    }
    else
    {
        err="The Title column cannot be null";
        return false;
    }
    return true;
}
bool Chapter::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Chapter::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Chapter_D"))
    {
        if(!validJsonOfField(0, "Chapter_D", pJson["Chapter_D"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Book_ID"))
    {
        if(!validJsonOfField(1, "Book_ID", pJson["Book_ID"], err, false))
            return false;
    }
    if(pJson.isMember("Order_ID"))
    {
        if(!validJsonOfField(2, "Order_ID", pJson["Order_ID"], err, false))
            return false;
    }
    if(pJson.isMember("Valid"))
    {
        if(!validJsonOfField(3, "Valid", pJson["Valid"], err, false))
            return false;
    }
    if(pJson.isMember("Content"))
    {
        if(!validJsonOfField(4, "Content", pJson["Content"], err, false))
            return false;
    }
    if(pJson.isMember("Remarks"))
    {
        if(!validJsonOfField(5, "Remarks", pJson["Remarks"], err, false))
            return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(6, "User_ID", pJson["User_ID"], err, false))
            return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(7, "Title", pJson["Title"], err, false))
            return false;
    }
    return true;
}
bool Chapter::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Chapter::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
