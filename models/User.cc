/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::novel;

const std::string User::Cols::_User_ID = "User_ID";
const std::string User::Cols::_Name = "Name";
const std::string User::Cols::_Password = "Password";
const std::string User::Cols::_Sex = "Sex";
const std::string User::Cols::_Integral = "Integral";
const std::string User::Cols::_Level = "Level";
const std::string User::Cols::_Power = "Power";
const std::string User::Cols::_Status = "Status";
const std::string User::Cols::_Total_Integral = "Total_Integral";
const std::string User::primaryKeyName = "User_ID";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"User_ID","int32_t","int(10)",4,0,1,1},
{"Name","std::string","varchar(255)",255,0,0,1},
{"Password","std::string","varchar(255)",255,0,0,1},
{"Sex","std::string","varchar(255)",255,0,0,1},
{"Integral","int32_t","int(10)",4,0,0,1},
{"Level","int32_t","int(10)",4,0,0,1},
{"Power","int32_t","int(10)",4,0,0,1},
{"Status","std::string","varchar(255)",255,0,0,1},
{"Total_Integral","int32_t","int(10)",4,0,0,1}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["User_ID"].as<int32_t>());
        }
        if(!r["Name"].isNull())
        {
            name_=std::make_shared<std::string>(r["Name"].as<std::string>());
        }
        if(!r["Password"].isNull())
        {
            password_=std::make_shared<std::string>(r["Password"].as<std::string>());
        }
        if(!r["Sex"].isNull())
        {
            sex_=std::make_shared<std::string>(r["Sex"].as<std::string>());
        }
        if(!r["Integral"].isNull())
        {
            integral_=std::make_shared<int32_t>(r["Integral"].as<int32_t>());
        }
        if(!r["Level"].isNull())
        {
            level_=std::make_shared<int32_t>(r["Level"].as<int32_t>());
        }
        if(!r["Power"].isNull())
        {
            power_=std::make_shared<int32_t>(r["Power"].as<int32_t>());
        }
        if(!r["Status"].isNull())
        {
            status_=std::make_shared<std::string>(r["Status"].as<std::string>());
        }
        if(!r["Total_Integral"].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>(r["Total_Integral"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            sex_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            integral_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            level_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            power_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            integral_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            level_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            power_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Password"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["Password"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<std::string>(pJson["Sex"].asString());
        }
    }
    if(pJson.isMember("Integral"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Integral"].isNull())
        {
            integral_=std::make_shared<int32_t>((int32_t)pJson["Integral"].asInt64());
        }
    }
    if(pJson.isMember("Level"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Level"].isNull())
        {
            level_=std::make_shared<int32_t>((int32_t)pJson["Level"].asInt64());
        }
    }
    if(pJson.isMember("Power"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Power"].isNull())
        {
            power_=std::make_shared<int32_t>((int32_t)pJson["Power"].asInt64());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Total_Integral"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Total_Integral"].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>((int32_t)pJson["Total_Integral"].asInt64());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            integral_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            level_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            power_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}
                                                                    
void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("User_ID"))
    {
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("Password"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["Password"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<std::string>(pJson["Sex"].asString());
        }
    }
    if(pJson.isMember("Integral"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Integral"].isNull())
        {
            integral_=std::make_shared<int32_t>((int32_t)pJson["Integral"].asInt64());
        }
    }
    if(pJson.isMember("Level"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Level"].isNull())
        {
            level_=std::make_shared<int32_t>((int32_t)pJson["Level"].asInt64());
        }
    }
    if(pJson.isMember("Power"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Power"].isNull())
        {
            power_=std::make_shared<int32_t>((int32_t)pJson["Power"].asInt64());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Total_Integral"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Total_Integral"].isNull())
        {
            totalIntegral_=std::make_shared<int32_t>((int32_t)pJson["Total_Integral"].asInt64());
        }
    }
}

const int32_t &User::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getUserId() const noexcept
{
    return userId_;
}
void User::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[0] = true;
}
const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(userId_);
    return *userId_;
}

const std::string &User::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getName() const noexcept
{
    return name_;
}
void User::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void User::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &User::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPassword() const noexcept
{
    return password_;
}
void User::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[2] = true;
}
void User::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[2] = true;
}

const std::string &User::getValueOfSex() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sex_)
        return *sex_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getSex() const noexcept
{
    return sex_;
}
void User::setSex(const std::string &pSex) noexcept
{
    sex_ = std::make_shared<std::string>(pSex);
    dirtyFlag_[3] = true;
}
void User::setSex(std::string &&pSex) noexcept
{
    sex_ = std::make_shared<std::string>(std::move(pSex));
    dirtyFlag_[3] = true;
}

const int32_t &User::getValueOfIntegral() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(integral_)
        return *integral_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getIntegral() const noexcept
{
    return integral_;
}
void User::setIntegral(const int32_t &pIntegral) noexcept
{
    integral_ = std::make_shared<int32_t>(pIntegral);
    dirtyFlag_[4] = true;
}

const int32_t &User::getValueOfLevel() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(level_)
        return *level_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getLevel() const noexcept
{
    return level_;
}
void User::setLevel(const int32_t &pLevel) noexcept
{
    level_ = std::make_shared<int32_t>(pLevel);
    dirtyFlag_[5] = true;
}

const int32_t &User::getValueOfPower() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(power_)
        return *power_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getPower() const noexcept
{
    return power_;
}
void User::setPower(const int32_t &pPower) noexcept
{
    power_ = std::make_shared<int32_t>(pPower);
    dirtyFlag_[6] = true;
}

const std::string &User::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getStatus() const noexcept
{
    return status_;
}
void User::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[7] = true;
}
void User::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[7] = true;
}

const int32_t &User::getValueOfTotalIntegral() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(totalIntegral_)
        return *totalIntegral_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getTotalIntegral() const noexcept
{
    return totalIntegral_;
}
void User::setTotalIntegral(const int32_t &pTotalIntegral) noexcept
{
    totalIntegral_ = std::make_shared<int32_t>(pTotalIntegral);
    dirtyFlag_[8] = true;
}

void User::updateId(const uint64_t id)
{
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "User_ID",
        "Name",
        "Password",
        "Sex",
        "Integral",
        "Level",
        "Power",
        "Status",
        "Total_Integral"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIntegral())
        {
            binder << getValueOfIntegral();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPower())
        {
            binder << getValueOfPower();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTotalIntegral())
        {
            binder << getValueOfTotalIntegral();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIntegral())
        {
            binder << getValueOfIntegral();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPower())
        {
            binder << getValueOfPower();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTotalIntegral())
        {
            binder << getValueOfTotalIntegral();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getPassword())
    {
        ret["Password"]=getValueOfPassword();
    }
    else
    {
        ret["Password"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getIntegral())
    {
        ret["Integral"]=getValueOfIntegral();
    }
    else
    {
        ret["Integral"]=Json::Value();
    }
    if(getLevel())
    {
        ret["Level"]=getValueOfLevel();
    }
    else
    {
        ret["Level"]=Json::Value();
    }
    if(getPower())
    {
        ret["Power"]=getValueOfPower();
    }
    else
    {
        ret["Power"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getTotalIntegral())
    {
        ret["Total_Integral"]=getValueOfTotalIntegral();
    }
    else
    {
        ret["Total_Integral"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[2]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSex())
            {
                ret[pMasqueradingVector[3]]=getValueOfSex();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIntegral())
            {
                ret[pMasqueradingVector[4]]=getValueOfIntegral();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLevel())
            {
                ret[pMasqueradingVector[5]]=getValueOfLevel();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPower())
            {
                ret[pMasqueradingVector[6]]=getValueOfPower();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[7]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getTotalIntegral())
            {
                ret[pMasqueradingVector[8]]=getValueOfTotalIntegral();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getPassword())
    {
        ret["Password"]=getValueOfPassword();
    }
    else
    {
        ret["Password"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getIntegral())
    {
        ret["Integral"]=getValueOfIntegral();
    }
    else
    {
        ret["Integral"]=Json::Value();
    }
    if(getLevel())
    {
        ret["Level"]=getValueOfLevel();
    }
    else
    {
        ret["Level"]=Json::Value();
    }
    if(getPower())
    {
        ret["Power"]=getValueOfPower();
    }
    else
    {
        ret["Power"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getTotalIntegral())
    {
        ret["Total_Integral"]=getValueOfTotalIntegral();
    }
    else
    {
        ret["Total_Integral"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(0, "User_ID", pJson["User_ID"], err, true))
            return false;
    }
    else
    {
        err="The User_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, true))
            return false;
    }
    else
    {
        err="The Name column cannot be null";
        return false;
    }
    if(pJson.isMember("Password"))
    {
        if(!validJsonOfField(2, "Password", pJson["Password"], err, true))
            return false;
    }
    else
    {
        err="The Password column cannot be null";
        return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, true))
            return false;
    }
    else
    {
        err="The Sex column cannot be null";
        return false;
    }
    if(pJson.isMember("Integral"))
    {
        if(!validJsonOfField(4, "Integral", pJson["Integral"], err, true))
            return false;
    }
    else
    {
        err="The Integral column cannot be null";
        return false;
    }
    if(pJson.isMember("Level"))
    {
        if(!validJsonOfField(5, "Level", pJson["Level"], err, true))
            return false;
    }
    else
    {
        err="The Level column cannot be null";
        return false;
    }
    if(pJson.isMember("Power"))
    {
        if(!validJsonOfField(6, "Power", pJson["Power"], err, true))
            return false;
    }
    else
    {
        err="The Power column cannot be null";
        return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(7, "Status", pJson["Status"], err, true))
            return false;
    }
    else
    {
        err="The Status column cannot be null";
        return false;
    }
    if(pJson.isMember("Total_Integral"))
    {
        if(!validJsonOfField(8, "Total_Integral", pJson["Total_Integral"], err, true))
            return false;
    }
    else
    {
        err="The Total_Integral column cannot be null";
        return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(0, "User_ID", pJson["User_ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, false))
            return false;
    }
    if(pJson.isMember("Password"))
    {
        if(!validJsonOfField(2, "Password", pJson["Password"], err, false))
            return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, false))
            return false;
    }
    if(pJson.isMember("Integral"))
    {
        if(!validJsonOfField(4, "Integral", pJson["Integral"], err, false))
            return false;
    }
    if(pJson.isMember("Level"))
    {
        if(!validJsonOfField(5, "Level", pJson["Level"], err, false))
            return false;
    }
    if(pJson.isMember("Power"))
    {
        if(!validJsonOfField(6, "Power", pJson["Power"], err, false))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(7, "Status", pJson["Status"], err, false))
            return false;
    }
    if(pJson.isMember("Total_Integral"))
    {
        if(!validJsonOfField(8, "Total_Integral", pJson["Total_Integral"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
