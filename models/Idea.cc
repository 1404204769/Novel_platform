/**
 *
 *  Idea.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Idea.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::novel;

const std::string Idea::Cols::_Idea_ID = "Idea_ID";
const std::string Idea::Cols::_User_ID = "User_ID";
const std::string Idea::Cols::_Type = "Type";
const std::string Idea::Cols::_Status = "Status";
const std::string Idea::Cols::_Processor = "Processor";
const std::string Idea::Cols::_IsManage = "IsManage";
const std::string Idea::Cols::_Memo = "Memo";
const std::string Idea::Cols::_Create_Time = "Create_Time";
const std::string Idea::Cols::_Update_Time = "Update_Time";
const std::string Idea::primaryKeyName = "Idea_ID";
const bool Idea::hasPrimaryKey = true;
const std::string Idea::tableName = "idea";

const std::vector<typename Idea::MetaData> Idea::metaData_={
{"Idea_ID","int32_t","int(10)",4,1,1,1},
{"User_ID","int32_t","int(10)",4,0,0,1},
{"Type","std::string","varchar(255)",255,0,0,1},
{"Status","std::string","varchar(255)",255,0,0,1},
{"Processor","std::string","varchar(255)",255,0,0,0},
{"IsManage","int8_t","tinyint(1)",1,0,0,1},
{"Memo","std::string","text",0,0,0,1},
{"Create_Time","::trantor::Date","timestamp",0,0,0,1},
{"Update_Time","::trantor::Date","timestamp",0,0,0,1}
};
const std::string &Idea::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Idea::Idea(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Idea_ID"].isNull())
        {
            ideaId_=std::make_shared<int32_t>(r["Idea_ID"].as<int32_t>());
        }
        if(!r["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["User_ID"].as<int32_t>());
        }
        if(!r["Type"].isNull())
        {
            type_=std::make_shared<std::string>(r["Type"].as<std::string>());
        }
        if(!r["Status"].isNull())
        {
            status_=std::make_shared<std::string>(r["Status"].as<std::string>());
        }
        if(!r["Processor"].isNull())
        {
            processor_=std::make_shared<std::string>(r["Processor"].as<std::string>());
        }
        if(!r["IsManage"].isNull())
        {
            ismanage_=std::make_shared<int8_t>(r["IsManage"].as<int8_t>());
        }
        if(!r["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(r["Memo"].as<std::string>());
        }
        if(!r["Create_Time"].isNull())
        {
            auto timeStr = r["Create_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Update_Time"].isNull())
        {
            auto timeStr = r["Update_Time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            ideaId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            processor_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            ismanage_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            memo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Idea::Idea(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            ideaId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            processor_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ismanage_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            memo_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Idea::Idea(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Idea_ID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Idea_ID"].isNull())
        {
            ideaId_=std::make_shared<int32_t>((int32_t)pJson["Idea_ID"].asInt64());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["Type"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Processor"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Processor"].isNull())
        {
            processor_=std::make_shared<std::string>(pJson["Processor"].asString());
        }
    }
    if(pJson.isMember("IsManage"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["IsManage"].isNull())
        {
            ismanage_=std::make_shared<int8_t>((int8_t)pJson["IsManage"].asInt64());
        }
    }
    if(pJson.isMember("Memo"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(pJson["Memo"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Idea::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            ideaId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            processor_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ismanage_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            memo_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}
                                                                    
void Idea::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Idea_ID"))
    {
        if(!pJson["Idea_ID"].isNull())
        {
            ideaId_=std::make_shared<int32_t>((int32_t)pJson["Idea_ID"].asInt64());
        }
    }
    if(pJson.isMember("User_ID"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["User_ID"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["User_ID"].asInt64());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["Type"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["Status"].asString());
        }
    }
    if(pJson.isMember("Processor"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Processor"].isNull())
        {
            processor_=std::make_shared<std::string>(pJson["Processor"].asString());
        }
    }
    if(pJson.isMember("IsManage"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["IsManage"].isNull())
        {
            ismanage_=std::make_shared<int8_t>((int8_t)pJson["IsManage"].asInt64());
        }
    }
    if(pJson.isMember("Memo"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Memo"].isNull())
        {
            memo_=std::make_shared<std::string>(pJson["Memo"].asString());
        }
    }
    if(pJson.isMember("Create_Time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Create_Time"].isNull())
        {
            auto timeStr = pJson["Create_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Update_Time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Update_Time"].isNull())
        {
            auto timeStr = pJson["Update_Time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &Idea::getValueOfIdeaId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(ideaId_)
        return *ideaId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Idea::getIdeaId() const noexcept
{
    return ideaId_;
}
void Idea::setIdeaId(const int32_t &pIdeaId) noexcept
{
    ideaId_ = std::make_shared<int32_t>(pIdeaId);
    dirtyFlag_[0] = true;
}
const typename Idea::PrimaryKeyType & Idea::getPrimaryKey() const
{
    assert(ideaId_);
    return *ideaId_;
}

const int32_t &Idea::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Idea::getUserId() const noexcept
{
    return userId_;
}
void Idea::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[1] = true;
}

const std::string &Idea::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Idea::getType() const noexcept
{
    return type_;
}
void Idea::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[2] = true;
}
void Idea::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[2] = true;
}

const std::string &Idea::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Idea::getStatus() const noexcept
{
    return status_;
}
void Idea::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[3] = true;
}
void Idea::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[3] = true;
}

const std::string &Idea::getValueOfProcessor() const noexcept
{
    const static std::string defaultValue = std::string();
    if(processor_)
        return *processor_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Idea::getProcessor() const noexcept
{
    return processor_;
}
void Idea::setProcessor(const std::string &pProcessor) noexcept
{
    processor_ = std::make_shared<std::string>(pProcessor);
    dirtyFlag_[4] = true;
}
void Idea::setProcessor(std::string &&pProcessor) noexcept
{
    processor_ = std::make_shared<std::string>(std::move(pProcessor));
    dirtyFlag_[4] = true;
}
void Idea::setProcessorToNull() noexcept
{
    processor_.reset();
    dirtyFlag_[4] = true;
}

const int8_t &Idea::getValueOfIsmanage() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(ismanage_)
        return *ismanage_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Idea::getIsmanage() const noexcept
{
    return ismanage_;
}
void Idea::setIsmanage(const int8_t &pIsmanage) noexcept
{
    ismanage_ = std::make_shared<int8_t>(pIsmanage);
    dirtyFlag_[5] = true;
}

const std::string &Idea::getValueOfMemo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(memo_)
        return *memo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Idea::getMemo() const noexcept
{
    return memo_;
}
void Idea::setMemo(const std::string &pMemo) noexcept
{
    memo_ = std::make_shared<std::string>(pMemo);
    dirtyFlag_[6] = true;
}
void Idea::setMemo(std::string &&pMemo) noexcept
{
    memo_ = std::make_shared<std::string>(std::move(pMemo));
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Idea::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Idea::getCreateTime() const noexcept
{
    return createTime_;
}
void Idea::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[7] = true;
}

const ::trantor::Date &Idea::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Idea::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Idea::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[8] = true;
}

void Idea::updateId(const uint64_t id)
{
    ideaId_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Idea::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "User_ID",
        "Type",
        "Status",
        "Processor",
        "IsManage",
        "Memo",
        "Create_Time",
        "Update_Time"
    };
    return inCols;
}

void Idea::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getProcessor())
        {
            binder << getValueOfProcessor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsmanage())
        {
            binder << getValueOfIsmanage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMemo())
        {
            binder << getValueOfMemo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Idea::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Idea::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getProcessor())
        {
            binder << getValueOfProcessor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsmanage())
        {
            binder << getValueOfIsmanage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMemo())
        {
            binder << getValueOfMemo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Idea::toJson() const
{
    Json::Value ret;
    if(getIdeaId())
    {
        ret["Idea_ID"]=getValueOfIdeaId();
    }
    else
    {
        ret["Idea_ID"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getProcessor())
    {
        ret["Processor"]=getValueOfProcessor();
    }
    else
    {
        ret["Processor"]=Json::Value();
    }
    if(getIsmanage())
    {
        ret["IsManage"]=getValueOfIsmanage();
    }
    else
    {
        ret["IsManage"]=Json::Value();
    }
    if(getMemo())
    {
        ret["Memo"]=getValueOfMemo();
    }
    else
    {
        ret["Memo"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    return ret;
}

Json::Value Idea::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getIdeaId())
            {
                ret[pMasqueradingVector[0]]=getValueOfIdeaId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[2]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[3]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getProcessor())
            {
                ret[pMasqueradingVector[4]]=getValueOfProcessor();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIsmanage())
            {
                ret[pMasqueradingVector[5]]=getValueOfIsmanage();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMemo())
            {
                ret[pMasqueradingVector[6]]=getValueOfMemo();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[7]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[8]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getIdeaId())
    {
        ret["Idea_ID"]=getValueOfIdeaId();
    }
    else
    {
        ret["Idea_ID"]=Json::Value();
    }
    if(getUserId())
    {
        ret["User_ID"]=getValueOfUserId();
    }
    else
    {
        ret["User_ID"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getProcessor())
    {
        ret["Processor"]=getValueOfProcessor();
    }
    else
    {
        ret["Processor"]=Json::Value();
    }
    if(getIsmanage())
    {
        ret["IsManage"]=getValueOfIsmanage();
    }
    else
    {
        ret["IsManage"]=Json::Value();
    }
    if(getMemo())
    {
        ret["Memo"]=getValueOfMemo();
    }
    else
    {
        ret["Memo"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["Create_Time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["Create_Time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["Update_Time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["Update_Time"]=Json::Value();
    }
    return ret;
}

bool Idea::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Idea_ID"))
    {
        if(!validJsonOfField(0, "Idea_ID", pJson["Idea_ID"], err, true))
            return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(1, "User_ID", pJson["User_ID"], err, true))
            return false;
    }
    else
    {
        err="The User_ID column cannot be null";
        return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(2, "Type", pJson["Type"], err, true))
            return false;
    }
    else
    {
        err="The Type column cannot be null";
        return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(3, "Status", pJson["Status"], err, true))
            return false;
    }
    else
    {
        err="The Status column cannot be null";
        return false;
    }
    if(pJson.isMember("Processor"))
    {
        if(!validJsonOfField(4, "Processor", pJson["Processor"], err, true))
            return false;
    }
    if(pJson.isMember("IsManage"))
    {
        if(!validJsonOfField(5, "IsManage", pJson["IsManage"], err, true))
            return false;
    }
    else
    {
        err="The IsManage column cannot be null";
        return false;
    }
    if(pJson.isMember("Memo"))
    {
        if(!validJsonOfField(6, "Memo", pJson["Memo"], err, true))
            return false;
    }
    else
    {
        err="The Memo column cannot be null";
        return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(7, "Create_Time", pJson["Create_Time"], err, true))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(8, "Update_Time", pJson["Update_Time"], err, true))
            return false;
    }
    return true;
}
bool Idea::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Idea::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Idea_ID"))
    {
        if(!validJsonOfField(0, "Idea_ID", pJson["Idea_ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("User_ID"))
    {
        if(!validJsonOfField(1, "User_ID", pJson["User_ID"], err, false))
            return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(2, "Type", pJson["Type"], err, false))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(3, "Status", pJson["Status"], err, false))
            return false;
    }
    if(pJson.isMember("Processor"))
    {
        if(!validJsonOfField(4, "Processor", pJson["Processor"], err, false))
            return false;
    }
    if(pJson.isMember("IsManage"))
    {
        if(!validJsonOfField(5, "IsManage", pJson["IsManage"], err, false))
            return false;
    }
    if(pJson.isMember("Memo"))
    {
        if(!validJsonOfField(6, "Memo", pJson["Memo"], err, false))
            return false;
    }
    if(pJson.isMember("Create_Time"))
    {
        if(!validJsonOfField(7, "Create_Time", pJson["Create_Time"], err, false))
            return false;
    }
    if(pJson.isMember("Update_Time"))
    {
        if(!validJsonOfField(8, "Update_Time", pJson["Update_Time"], err, false))
            return false;
    }
    return true;
}
bool Idea::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Idea::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
