/* This is a JSON format configuration file*/
{
    /*ssl项是为了配置https服务的加密配置文件，如下：其中，cert是证书文件路径，key是私钥文件路径，
    如果一个文件既包含证书也包含私钥，则两个路径可以配制成相同的。文件的编码格式为PEM；
    conf则是可选的SSL选项。他们会直接被传入SSL_CONF_cmd里，用来定制化SSL连接。
    这些选项必须是一个或是两个元素的字串数组。*/
    "ssl": {
        "cert": "../../trantor/trantor/tests/server.pem",
        "key": "../../trantor/trantor/tests/server.pem"
        //"conf": [
        //["Options", "-SessionTicket"], 
        //["Options", "Compression"]
        //]
    },
    /*mime註冊新mime類型  app项的子项、字符串字典。声明发送与静态文件時如何将文件扩展映射到新的 MIME 类型（即。默认情况下未识别的）。
    注意，此选项仅注册 MIME。如果扩展不在上述file_types中，则框架仍发送 404。*/
    "mime": {
        // "text/markdown": "md",
        // "text/gemini": ["gmi", "gemini"]
    },
    /*listeners监听器 顾名思义，listeners项是为了配置webapp的监听器，它是一个JSON数组类型，每一个JSON对象都表示一个监听，具体的配置如下：
    其中：
        address: 字符串类型，表示监听的IP地址，如果没有该项，则采用默认值"0.0.0.0"
        port: 整数类型，表示监听的端口，必须是合法的端口号，没有默认值，必填项。
        https: 布尔类型，表示是否采用https，默认值是false，表示使用http。
        cert和key: 字符串类型，在https为true时有效，表示https的证书和私钥，默认值是空字符串，表示采用全局的ssl配置的证书和私钥文件；*/
    "listeners": [
        {
            //address: Ip address,0.0.0.0 by default
            "address": "0.0.0.0",
            //port: Port number
            "port": 8080,
            //https: If true, use https for security,false by default
            "https": false
        } /*,
        {
            "address": "0.0.0.0",
            "port": 443,
            "https": true,
            //cert,key: Cert file path and key file path, empty by default,
            //if empty, use the global setting
            "cert": "",
            "key": "",
            //use_old_tls: enable the TLS1.0/1.1, false by default
            "use_old_tls": false
            //"ssl_conf": [
                //["MinProtocol", "TLSv1.3"]
            //]
        }*/
    ],
    /*db_clients用于配置数据库客户端，它是一个JSON数组类型，每一个JSON对象都表示一个单独的数据库客户端，具体的配置如下：
    其中：
        name：字符串，客户端名字，默认是"default"，name是应用开发者从框架获取数据库客户端的标记，如果有多项客户端，name字段必须不同，否则，框架不会正常工作；
        rdbms：字符串，表示数据库服务端类型，目前支持"postgresql"，"mysql"和“sqlite3”，大小写不敏感。
        host：字符串，数据库服务端地址，localhost是默认值；
        port：整数，数据库服务端的端口号；
        dbname：字符串，数据库名字；
        user：字符串，用户名；
        passwd：字符串，密码；
        is_fast：bool，默认false，表明该客户端是否是FastDbClient；
        connection_number：到数据库服务端的连接数，至少是1，默认值也是1，影响数据读写的并发量；如果is_fast为真，该数值表示每个事件循环的连接数，否则表示总的连接数；
        filename: sqlite3数据库的文件名； */
    "db_clients": [
        {
            //name: Name of the client,'default' by default
            //"name":"",
            //rdbms: Server type, postgresql,mysql or sqlite3, "postgresql" by default
            "rdbms": "mysql",
            "host": "127.0.0.1",
            "port": 3306,
            "dbname": "novel",
            "user": "root",
            "passwd": "root",
            "is_fast": false,
            //客户端编码：客户端使用的字符集。默认情况下，它是空字符串表示使用默认字符集。
            "client_encoding": "utf8",
            //连接数：默认情况下为1，如果'is_fast'为真，则该数为每个IO线程的连接数，否则为所有连接的总数。
            "number_of_connections": 1,
            //超时：-1.0默认情况下，执行SQL查询的超时，以秒为单位。零或负值表示没有超时。
            "timeout": -1.0
        }
    ],
    "app": {
        /*threads_num线程数  number_of_threads属于app选项的子项，整数，默认值是1，表示框架IO线程数，对网络并发有明确的影响，这个数字并不是越大越好，
        了解non-blocking I/O原理的应该知道，这个数值应该和你期望网络IO占用的CPU核心数一致。
        如果这个参数设为0，那么IO线程数将设置为全部CPU核心数。比如："threads_num": 16,
        表示，网络IO占用16个线程，在高负荷情况下，最多可以跑满16个CPU核心(线程核心)。*/
        "number_of_threads": 1,
        /*session会话
        会话相关的选项也是app的子项，控制是否采用session和session的超时时间。如：
        "enable_session": true,
        "session_timeout": 1200,
        其中：
            enable_session：布尔值，表示是否采用会话，默认值是false，如果客户端不支持cookie，请设为false，
            因为框架会为每个不带会话cookie的请求创建新的会话，如果客户端不支持cookie而又有大量请求，则服务端会生成大量的无用session对象，这是完全没必要的资源和性能损失；
            session_timeout：整数值，表示会话的超时时间，单位是秒，默认值是0，只有enable_session为true时才发挥作用。0表示永久有效。*/
        "enable_session": true,
        "session_timeout": 60,
        /*document_root根目录 
         app项的子项，字符串，表示Http根目录对应的文档路径，是静态文件下载的根路径，默认值是"./"，表示程序运行的当前路径。比如:"document_root": "./",
        */
        "document_root": "./",
        /*home_page：设置主页的HTML文件，默认值为“index.HTML”，如果路径“/”没有注册任何处理程序，“document_root”中的主页文件作为对“/”请求的响应发送给客户端。*/
        "home_page": "index.html",
        /*use_implicit_page：如果为true，则启用隐式页面，默认为true*/
        "use_implicit_page": true,
        /*implicit_page：在用户访问的目录中设置服务器将访问的文件。
        例如，默认情况下，http://localhost/a-directory 将访问 http://localhost/a-directory/index.html.*/
        "implicit_page": "index.html",
        /*static_file_headers:静态文件的头*/
        /*"static_file_headers": [
          {
                "name": "field-name",
                "value": "field-value"
          }
        ],*/
        /*upload_path上传文件路径 app项的子项，字符串，表示上传文件的默认路径，默认值是"uploads"，
        如果这个值不是/,./或../开始的，并且这个值也不是.或..，则这个路径是前面document_root项的相对路径，否则就是一个绝对路径或者当前目录的相对路径。*/
        "upload_path": "uploads",
         /*file_types文件类型 app项的子项，字符串数组，默认值如下，表示框架支持的静态文件下载类型，如果请求的静态文件扩展名在这些类型之外的，框架将返回404错误。*/
        "file_types": [
            "gif","png","jpg","js","css",
            "html","ico","swf","xap","apk",
            "cur","xml"
        ],
        /*locations:GET请求的静态文件位置数组。*/
        "locations": [
            {
                /*uri_prefix:“/”位置的uri前缀，默认值为“”禁用该位置。*/
                //uri_prefix: The URI prefix of the location prefixed with "/", the default value is "" that disables the location.
                //"uri_prefix": "/.well-known/acme-challenge/",
                /*default_content_type:没有扩展名的静态文件的默认内容类型。默认情况下为空字符串。*/
                "default_content_type": "text/plain",
                /*alias:文件系统中的位置，如果前缀为“/”，则表示绝对路径，否则表示文档根路径的相对路径。默认值为“”，这意味着使用document root path作为位置基路径。*/
                "alias": "",
                /*is_case_sensitive:指示URI前缀是否区分大小写。*/
                "is_case_sensitive": false,
                /*allow_all:默认情况下为true。如果设置为false，则只能访问具有有效扩展名的静态文件。*/
                "allow_all": true,
                /*is_recursive:默认情况下为true。如果设置为false，则无法访问子目录中的文件。*/
                "is_recursive": true
                //filters: string array, the filters applied to the location.
                //"filters": []
            }
        ],
        /*connections连接数控制  app项的子项，有两个选项，如下：
            "max_connections": 100000,
            "max_connections_per_ip": 0,
        其中：
            max_connections：整数，默认值是100000，表示同时并发的最大连接数；当服务端维持的连接达到这个数量时，新的TCP连接请求将被直接拒绝。
            max_connections_per_ip：整数，默认值是0，表示单个IP的最大连接数，0表示没有限制。*/
        "max_connections": 100000,
        "max_connections_per_ip": 0,
        /*dynamic_views动态视图加载  app的子选项，控制动态视图的使能和路径，有两个选项，如下：其中：
            Load_dynamic_views：布尔值，默认值是false，当为true时，框架会在视图路径中搜索视图文件，
                并动态编译成so文件，然后加载进应用，当任何视图文件发生变化时，也会引起自动编译和重新加载；
            dynamic_views_path：字符串数组，每一项表示动态视图的搜索路径，如果路径值不是/,./或../开始的，
            并且这个值也不是.或..，则这个路径是前面document_root项的相对路径，否则就是一个绝对路径或者当前目录的相对路径。*/
        "load_dynamic_views": false,
        "dynamic_views_path": [
            "./views"
        ],
        /*dynamic_views_output_path:默认为空字符串，这意味着源文件的输出路径是csp文件所在的路径。如果路径的前缀不是/，则它是当前工作目录的相对路径。*/
        "dynamic_views_output_path": "",
        /*enable_unicode_escaping_in_json:默认情况下true，启用json中的unicode转义。*/
        "enable_unicode_escaping_in_json": true,
        /*float_precision_in_json:设置浮点数的精度。*/
        "float_precision_in_json": {
            /*precision:默认为0，0表示使用jsoncpp库的默认精度。*/
            "precision": 0,
            /*precision_type:必须为“significant”或“decimal”，默认为“significant”，表示设置字符串中最大有效位数，“decimal”表示设置字符串中“.”之后的最大位数*/
            "precision_type": "significant"
        },
        /*log日志选项  app项的子项，同时也是个JSON对象，控制日志输出的行为，如下：
        其中：
            log_path：字符串，默认值是空串，表示文件存放的路径，如果是空串，则所有日志输出到标准输出；
            logfile_base_name：字符串，表示日志文件的basename，默认值是空串，这时basename将为drogon；
            log_size_limit：整数，单位是字节，默认值是100000000(100M)，当日志文件的大小达到这个数值时，日志文件会切换。
            log_level：字符串，默认值是"DEBUG"，表示日志输出的最低级别，可选值从低到高为："TRACE","DEBUG","INFO","WARN"，其中的TRACE级别只有在DEBUG编译的情况下才有效。
            注意： Drogon的文件日志采用了非阻塞输出结构，大概可以达到每秒百万行的日志输出能力，可以放心使用。
        */
        "log": {
            "log_path": "../logs",
            "logfile_base_name": "DEBUG_LOG",
            "log_size_limit": 100000000,
            "log_level": "DEBUG"
        },
        /*应用控制也是app子项，有两个控制项，如下：
            "run_as_daemon": false,
            "relaunch_on_error": false,
        其中：
            run_as_daemon：布尔值，默认值是false，当为true时，应用程序将以daemon的形式变成1号进程的子进程运行于系统后台。
            relaunch_on_error：布尔值，默认值时false，当为true时，应用程序将fork一次，子进程执行真正的工作，父进程什么都不干，
            只负责在子进程崩溃或因其它原因退出时重启子进程，这是一种简单的服务保护机制。*/
        "run_as_daemon": false,
        "relaunch_on_error": true,
        //handle_sig_term: True by default
        "handle_sig_term": true,
        /*use_sendfile发送文件 app子选项，布尔值，表示在发送文件时是否采用linux系统调用sendfile，默认值时true，使用sendfile可以提高发送效率，减少大文件的内存占用。
        如下："use_sendfile": true,注意：即使该项为true，sendfile系统调用也不一定会采用，因为小文件使用sendfile并不一定划算，框架会根据自己的优化策略决定是否采用。*/
        "use_sendfile": true,
        /*use_gzip压缩传输 app子选项，布尔值，默认值是true，表示Http响应的Body是否采用压缩传输。当该项为true时，下面的情况采用压缩传输：
        客户端支持gzip压缩；body是文本类型；body的长度大于一定值；*/
        "use_gzip": true,
        /*use_brotli:默认情况下，使用brotli压缩响应主体的内容；*/
        "use_brotli": false,
        /*files_cache_time文件缓存时间  app子选项，整数值，单位秒，表示静态文件在框架内部的缓存时间，
        即，在这段时间内对该文件的请求，框架会直接从内存返回响应而不会读取文件系统，这对提高静态文件性能有一定好处，
        当然，代价是更新实时性有n秒的延时。默认值是5秒，0表示永远缓存（只会读文件系统一次，慎用），负数表示没有缓存。*/
        "static_files_cache_time": 5,
        /*simple_controllers_map  app子选项，JSON对象数组，每一项表示一个从Http路径到HttpSimpleController的映射，
        这种配置只是一个可选途径，并不是必须配置在这里，请参阅HttpSimpleController。 具体的配置如下：其中：
            path：字符串，Http路径；
            controller：字符串，HttpSimpleController的名字；
            http_methods：字符串数组，支持的Http方法，这个列表之外的会被过滤掉，返回405错误；
            filters：字符串数组，路径上的filter列表，参见过滤器；*/
        "simple_controllers_map": [
            {
                "path": "/",
                "controller": "Introduce",
                "http_methods": [
                    "Get",
                    "Post"
                ]
                //,
                //"filters": [
                //    "FilterClassName"
                //]
            }
        ],
        /*idle_connection_timeout空闲连接超时控制 app子选项，整数值，单位秒，默认值是60，当一个连接超过这个数值的时间没有任何读写的时候，该连接将会被强制断开。如下：*/
        "idle_connection_timeout": 60,
        /*server_header_field头字段  app的子选项，配置由框架发送的所有response的Server头字段，默认值是空串，
        当该选项为空时，框架会自动生成形如Server: drogon/version string的头字段。如下：*/
        "server_header_field":"LiZhiCheng",
        /*enable_server_header 设置为true可强制drogon向每个HTTP响应添加“server”头。默认值为true。*/
        "enable_server_header": true,
        /*enable_date_header:设置为true可强制drogon向每个HTTP响应添加“date”头。默认值为true。*/
        "enable_date_header": true,
        /*keepalive_requests长连接请求数：选项设置客户端在一个keepalive长连接上可以发送的最大请求数。
        当达到这个请求数时，长连接将被关闭。默认值0代表没有限制。*/
        "keepalive_requests": 0,
        /*Pipelining请求数  pipelining_requests选项用于设置长连接上已接收但未必处理的最大的请求数。
        当这个数字达到时，长连接将被关闭。默认值0代表没有限制。关于pipelining的详细描述，请参阅标准文档rfc2616-8.1.1.2。*/
        "pipelining_requests": 0,
        /*gzip_static:如果设置为true，当客户端请求静态文件时，drogon首先在同一路径中找到扩展名为“.gz”的压缩文件，并将压缩文件发送给客户端。gzip_static的默认值为true。*/
        "gzip_static": true,
        /*br_static:如果设置为true，则当客户端请求静态文件时，drogon首先在同一路径中找到扩展名为“.br”的压缩文件，并将压缩文件发送给客户端。br_static的默认值为true。*/
        "br_static": true,
        /*client_max_body_size:设置drogon接收的HTTP请求的最大正文大小。默认值为“1M”。可以将其设置为“1024”、“1k”、“10M”、“1G”等。将其设置为“”表示没有限制。*/
        "client_max_body_size": "1M",
        /*client_max_memory_body_size:设置drogon接收的HTTP请求在内存中的最大正文大小。
        默认值为“64K”字节。如果HTTP请求的正文大小超过此限制，则正文将存储到临时文件中进行处理。将其设置为“”表示没有限制。*/
        "client_max_memory_body_size": "64K",
        /*client_max_websocket_message_size:设置websocket客户端发送的消息的最大大小。
        默认值为“128K”。可以将其设置为“1024”、“1k”、“10M”、“1G”等。将其设置为“”表示没有限制。*/
        "client_max_websocket_message_size": "128K",
        /*reuse_port:默认为false，用户可以同时在同一端口上运行多个监听进程。*/
        "reuse_port": false
    },
    /*plugins：定义应用程序中运行的所有插件*/
    "plugins": [
        {
            //name: The class name of the plugin
            "name": "MyBase",
            //dependencies: Plugins that the plugin depends on. It can be commented out
            "dependencies": [],
            //config: The configuration of the plugin. This json object is the parameter to initialize the plugin.
            //It can be commented out
            "config": {
                //"secret": "lizhicheng"
            }
        },
        {
            //name: The class name of the plugin
            "name": "MyJson",
            //dependencies: Plugins that the plugin depends on. It can be commented out
            "dependencies": ["MyBase"],
            //config: The configuration of the plugin. This json object is the parameter to initialize the plugin.
            //It can be commented out
            "config": {
                //"secret": "lizhicheng"
            }
        },
        {
            //name: The class name of the plugin
            "name": "MyTools",
            //dependencies: Plugins that the plugin depends on. It can be commented out
            "dependencies": ["MyBase"],
            //config: The configuration of the plugin. This json object is the parameter to initialize the plugin.
            //It can be commented out
            "config": {
                //"secret": "lizhicheng"
            }
        },
        {
            //name: The class name of the plugin
            "name": "MyRoot",
            //dependencies: Plugins that the plugin depends on. It can be commented out
            "dependencies": ["MyTools" , "MyJson", "MyBase"],
            //config: The configuration of the plugin. This json object is the parameter to initialize the plugin.
            //It can be commented out
            "config": {
                "Account":"admin",
                "Password":"admin"
            }
        },
        {
            //name: The class name of the plugin
            "name": "MyJwt",
            //dependencies: Plugins that the plugin depends on. It can be commented out
            "dependencies": ["MyJson", "MyBase"],
            //config: The configuration of the plugin. This json object is the parameter to initialize the plugin.
            //It can be commented out
            "config": {
                "secret": "lizhicheng"
            }
        }
    ],
    /*custom_config:用户的自定义配置。此对象可以通过app（）.getCustomConfig（）方法获取。*/
    "custom_config": {}
}
